security:
    hide_user_not_found: false
    access_denied_url: login
    session_fixation_strategy: migrate # One of "none"; "migrate"; "invalidate"
    enable_authenticator_manager: true
#    encoders:
#        App\Entity\Vendor\VendorSecurity:
#            algorithm: auto
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        chain_provider:
            chain:
                providers: [in_memory, postgres_users]
        in_memory:
            memory:
                users:
                    admin: # It's login
                        password: admin
                        roles: 'ROLE_ADMIN'
        postgres_users:
            entity:
                class: App\Entity\Vendor\VendorSecurity
                property: email
    role_hierarchy:
        ROLE_USER: [ ROLE_ALLOWED_TO_SWITCH ]
        ROLE_ADMIN: [ ROLE_USER ]
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
#        wsse:
#            pattern:   ^/wsse/
#            stateless: true
#            wsse:      { lifetime: 30 }
#            security: false
#        api:
#            pattern: ^/api
#            stateless: true
#            jwt: ~
#            provider: database_users
#            security: false
#            logout: ~
#            guard:
#                authenticators:
#                - App\Security\TokenAuthenticator
#                - lexik_jwt_authentication.jwt_token_authenticator
#                - FacebookConnectAuthenticator
        main:
            pattern: ^/
            lazy: true
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH }
            provider: postgres_users
#            security: false # Not 'true' with HWI
            remember_me:
                secret: '%app_secret%' # or '%env(APP_SECRET)%'
                samesite: none
                lifetime: 604800 # 1 week in seconds # https://symfony.com/doc/current/security/remember_me.html
                always_remember_me: true
            login_throttling:
                max_attempts: 100
                interval: '15 minutes' # по лимитеру больше на сайте https://symfony.com/doc/current/security.html#firewalls-authentication
            http_basic:
                realm: Secured Area
            json_login:
                check_path: api_login_check
            custom_authenticators:
#                - App\Security\PassportAuthenticator
                - App\Security\FormAuthenticator
                - App\Security\LoginFormAuthenticator
                - App\Security\ApiKeyAuthenticator
            entry_point: App\Security\FormAuthenticator
#            entry_point: form_login # TODO:проверить комбинацию
            form_login:
                enable_csrf: true # if true, to csrf_token_generator must be false
                csrf_parameter: '%app_csrf_token%'
                csrf_token_id: 'weqweqweDFDFDFFDwqeqwewqewqe' # Can be '%env(APP_SECRET)%'
#                csrf_token_generator: security.csrf.token_manager # dont work with enable_authenticator_manager is true
                check_path: /connect/login_check
                login_path: '%app_login_route%'
                always_use_default_target_path: true
                default_target_path: '%app_default_target_path%'
#                target_path_parameter: redirect
                failure_path_parameter: forgot
                failure_path: login
                username_parameter: _email
                password_parameter: _password
                use_forward: false
                use_referer: true
            oauth:
                resource_owners:
                    facebook: "/login/check-facebook"
                    google: "/login/check-google"
                    github: "/login/check-github"
                login_path: /login
                use_forward: false
                failure_path: /login
                oauth_user_provider:
                    service: hwi_oauth.user.provider.entity
            logout:
                path: '%app_logout_route%'
                target: '%app_logged_out_target_route%'
    access_control:
        - { path: ^/login, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/connect, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/admin, roles: [IS_AUTHENTICATED_ANONYMOUSLY, ROLE_ADMIN], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/admin/login, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/category/new, roles: [ROLE_ADMIN], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/profile/, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/project/new, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/product/new, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/api/, roles: ROLE_USER, ip: '%env(TRUSTED_IPS)%' }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
