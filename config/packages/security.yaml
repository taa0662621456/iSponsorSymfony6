security:
    hide_user_not_found: false
    access_denied_url: login
    session_fixation_strategy: migrate # One of "none"; "migrate"; "invalidate"
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\Vendor\VendorSecurity:
            algorithm: auto
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        chain_provider:
            chain:
                providers: [in_memory, postgres_users]
        in_memory:
            memory:
                users:
                    admin:
                        password: admin
                        roles: 'ROLE_ADMIN'
                    user:
                        password: user
                        roles: 'ROLE_USER'
                    editor:
                        password: editor
                        roles: ['ROLE_USER', 'ROLE_EDITOR']
        postgres_users:
            entity:
                class: App\Entity\Vendor\VendorSecurity
                property: email
    role_hierarchy:
        ROLE_USER: [ ROLE_ALLOWED_TO_SWITCH ]
        ROLE_ADMIN: [ ROLE_USER ]
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        wsse:
            pattern:   ^/wsse/
            stateless: true
            security: false
        api:
            pattern: ^/api
            stateless: true
#            jwt: ~
            provider: postgres_users
            logout: ~
            custom_authenticators:
                - App\Security\TokenAuthenticator
                # - lexik_jwt_authentication.jwt_token_authenticator
#                - FacebookConnectAuthenticator
        main:
            pattern: ^/
            lazy: true
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH }
            provider: postgres_users
            security: true # Not 'true' with HWI
            two_factor:
                auth_form_path: 2fa_login             # The route name you have used in the routes.yaml
                check_path: 2fa_login_check           # The route name you have used in the routes.yaml
                post_only: true                       # If the check_path should accept the code only as a POST request
                default_target_path: /                # Where to redirect by default after successful authentication
                always_use_default_target_path: false # If it should always redirect to default_target_path
                auth_code_parameter_name: _auth_code  # Name of the parameter for the two-factor authentication code
                # (supports symfony/property-access notation for nested values)
                trusted_parameter_name: _trusted      # Name of the parameter for the trusted device option
                # (supports symfony/property-access notation for nested values)
                remember_me_sets_trusted: false       # If remember-me option should also set the trusted device cookie
                multi_factor: false                   # If ALL active two-factor methods need to be fulfilled
#                success_handler: acme.custom_success_handler  # Use a custom success handler instead of the default one
#                failure_handler: acme.custom_failure_handler  # Use a custom failure handler instead of the default one
                # authentication_required_handler: acme.custom_auth_reqired_handler
                prepare_on_login: false          # If the two-factor provider should be prepared right after login
                prepare_on_access_denied: false

                enable_csrf: true                # If CSRF protection should be enabled on the two-factor auth form
                csrf_parameter: _csrf_token      # The default CSRF parameter name
                csrf_token_id: two_factor        # The default CSRF token id, for generating the token value, it is
                # provider: any_user_provider
            remember_me:
                secret: '%app_secret%' # or '%env(APP_SECRET)%'
                samesite: none
                lifetime: 604800
                always_remember_me: true
            login_throttling:
                max_attempts: 100
                interval: '15 minutes'
            http_basic:
                realm: Secured Area
            json_login:
                check_path: /api/login_check
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            custom_authenticators:
#                - App\Security\PassportAuthenticator
                - App\Security\FormAuthenticator
                - App\Security\LoginFormAuthenticator
                - App\Security\ApiKeyAuthenticator
#            entry_point: App\Security\FormAuthenticator
            entry_point: form_login
            form_login:
                enable_csrf: true # if true, to csrf_token_generator must be false
                csrf_parameter: '%app_csrf_token%'
                csrf_token_id: 'weqweqweDFDFDFFDwqeqwewqewqe' # Can be '%env(APP_SECRET)%'
#                csrf_token_generator: security.csrf.token_manager # dont work with enable_authenticator_manager is true
                check_path: /connect/login_check
                login_path: '%app_login_route%'
                always_use_default_target_path: true
                default_target_path: '%app_default_target_path%'
#                target_path_parameter: redirect
                failure_path_parameter: forgot
                failure_path: login
                username_parameter: _email
                password_parameter: _password
                use_forward: false
                use_referer: true
            oauth:
                resource_owners:
                    facebook: "/login/check-facebook"
                    google: "/login/check-google"
                    github: "/login/check-github"
                login_path: /login
                use_forward: false
                failure_path: /login
                oauth_user_provider:
                    service: hwi_oauth.user.provider.entity
            logout:
                path: '%app_logout_route%'
                target: '%app_logged_out_target_route%'
    access_control:
        - { path: ^/login, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/logout, role: PUBLIC_ACCESS }
        - { path: ^/connect, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/admin, roles: [IS_AUTHENTICATED_ANONYMOUSLY, ROLE_ADMIN], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/admin/login, roles: [IS_AUTHENTICATED_ANONYMOUSLY, PUBLIC_ACCESS], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/category/new, roles: [ROLE_ADMIN], ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/profile/, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/project/new, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/product/new, roles: ROLE_USER, ips: '%env(TRUSTED_IPS)%' }
        - { path: ^/api/login, roles: PUBLIC_ACCESS, ip: '%env(TRUSTED_IPS)%' }
        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY, ip: '%env(TRUSTED_IPS)%' }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }


when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
