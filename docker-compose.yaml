version: '3.5'
# https://gitlab.com/dev-coach/myapp/-/blob/master/back/Dockerfile

services:
  ######################################
#  nginx:
#    build:
#      context: .
#      dockerfile: docker/nginx/nginx.Dockerfile
#      args:
#        DOCKER_IMAGE: ${DOCKER_IMAGE}
#    container_name: nginx
#    ports:
#      - "${NGINX_PORT}:${NGINX_PORT}"
#      - "433:433"
#    links:
#      - php-cli
#      - php-fpm
#      - postgres
#      - redis
##      - mongo
#    volumes:
#      - ./docker/www:/var/www
#      - ./public:/var/www/book
#      - ./src:/var/www/book/src
#      - ./:/var/www/book/dev
#      - ./docker/nginx/conf.d:/etc/nginx/conf.d
#      - ./docker/nginx/logs:/var/log/nginx/
#    depends_on:
#      - redis
##      - mongo
#      - postgres
#      - php-fpm
#      - php-cli
#      - rabbitmq
#    environment:
#      TZ: ${WORKSPACE_TIMEZONE}
#      APP_ENV: 'dev'
#      APP_DEBUG: 'true'
#    networks:
#      - dev
  ######################################
  php-fpm:
    build:
      context: .
      dockerfile: docker/php/php-fpm.Dockerfile
      args:
        DOCKER_IMAGE: ${DOCKER_IMAGE}
    restart: unless-stopped
    healthcheck:
        interval: 10s
        timeout: 3s
        retries: 3
        start_period: 30s
    links:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    environment:
      ELASTICSEARCH_HOST: 'elasticsearch:9200'
      APP_ENV: 'prod'
      APP_DEBUG: 'false'
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-14}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${SERVER_NAME:-example\.com|localhost}|caddy$$
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://caddy/.well-known/mercure}
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}

    tty: true
    working_dir: /var/www
    container_name: php-fpm
#    volumes:
#      - ./.ssh:/home/www-data/.ssh
#      - ./docker/www:/var/www/
#      - ./public:/var/www/book/
#      - ./src:/var/www/book/src/
#      - ./:/var/www/book/dev/
#      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
#      - ./php-workers/supervisor.d:/etc/supervisor.d
#      - ./docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
#      - ./docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
#      - ./docker/php/conf.d/opcache.ini://usr/local/etc/php/conf.d/opcache.ini
#        entrypoint: "php -S 0.0.0.0:8000"
#  - php_socket:/var/run/php
#    depends_on:
#      - postgres
#      - redis
#      - rabbitmq
#      - redis-queue
    #        - storage
    ports:
#      - "127.0.0.1:8080:8080"
      - "${PHP_7_4_PORT}:${PHP_7_4_PORT}"
#      - "${PHP_8_0_PORT}:${PHP_8_0_PORT}"
    logging:
      driver: "json-file"
      options:
        max-size: "1024k"
        max-file: "2"
    extra_hosts:
      - 'book.localhost:93.73.44.251'
    networks:
      - dev
  ######################################
  pwa:
      build:
          context: ./pwa
          target: prod
      environment:
          NEXT_PUBLIC_ENTRYPOINT: http://caddy
  ######################################
  caddy:
      build:
          context: api/
          target: app_caddy
      depends_on:
          - php
          - pwa
      environment:
          PWA_UPSTREAM: pwa:3000
          SERVER_NAME: ${SERVER_NAME:-localhost}, caddy:80
          MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
          MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      restart: unless-stopped
      volumes:
          - php_socket:/var/run/php
          - caddy_data:/data
          - caddy_config:/config
#      ports:
          # HTTP
#          - target: 80
#              published: ${HTTP_PORT:-80}
#              protocol: tcp
          # HTTPS
#          -   target: 443
#              published: ${HTTPS_PORT:-443}
#              protocol: tcp
          # HTTP/3
#          -   target: 443
#              published: ${HTTP3_PORT:-443}
#              protocol: udp
  ######################################

  php-cli:
    build:
      context: .
      dockerfile: docker/php/php-cli.Dockerfile
      args:
        DOCKER_IMAGE: ${DOCKER_IMAGE}
    links:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: 'elasticsearch:9200'
      TZ: ${WORKSPACE_TIMEZONE}
    tty: true
    working_dir: /var/www
    container_name: php-cli
    volumes:
      - ./.ssh:/home/www-data/.ssh
      - ./docker/www:/var/www/
      - ./:/var/www/book/
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
#      - ./php-workers/supervisor.d:/etc/supervisor.d
      - ./docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
      - composer:/root/.composer/cache
    entrypoint: "php -S 0.0.0.0:8000"
    depends_on:
      - postgres
      - redis
#      - redis-queue
#      - storage
    ports:
#      - "127.0.0.1:8074:8074"
#      - "${PHP_7_4_PORT}:${PHP_7_4_PORT}"
      - "${PHP_8_0_PORT}:${PHP_8_0_PORT}"
    logging:
      driver: "json-file"
      options:
        max-size: "1024k"
        max-file: "2"
    #      extra_hosts:
    #        - 'book.localhost:93.73.44.251'
    networks:
      - dev
  ######################################
  redis:
    build:
      context: .
      dockerfile: docker/redis/redis.Dockerfile
      args:
        DOCKER_IMAGE: ${DOCKER_IMAGE}
    ports:
      - "${REDIS_PORT}:6379"
    container_name: redis
    volumes:
      - ./docker/redis/data:/var/lib/redis
      - ./docker/redis/conf:/usr/local/etc/redis/redis.conf
    command:
      - 'redis-server'
      - '--databases 2'
      - '--save 900 1'
      - '--save 300 10'
      - '--save 60 10000'
      - '--requirepass secret'
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - dev
  ######################################
  redis-queue:
    #    build:
    #      context: .
    #      dockerfile: docker/redis/redis.Dockerfile
    image: redis:latest
    volumes:
      - ./docker/redis/queue:/var/www/queue
    container_name: redis-queue
    networks:
      - dev
  ######################################
  # https://habr.com/ru/post/578744/
  postgres:
#    image: postgres:${POSTGRES_VERSION:-14}-alpine
    image: postgres:13.3
#    build:
#      context: .
#      dockerfile: docker/postgres/postgres.Dockerfile
#      args:
#        DOCKER_IMAGE: ${DOCKER_IMAGE}
    volumes:
#      - .:/docker-entrypoint-initdb.d
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/dump:/var/dump
#      - db_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
#      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${WORKSPACE_TIMEZONE}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    container_name: postgres
    networks:
      - dev
  ######################################
#  mongo:
#    build:
#      context: .
#      dockerfile: docker/mongo/mongo.Dockerfile
#      args:
#        DOCKER_IMAGE: ${DOCKER_IMAGE}
##    volumes:
##      - ./docker/www:/var/www/
##      - ./public:/var/www/book/
##      - ./src:/var/www/book/src/
##      - ./:/var/www/book/dev/
#    container_name: mongo
#    networks:
#      - dev
  ######################################
#  node:
#    build:
#      context: .
#      dockerfile: docker/node/node.Dockerfile
#    volumes:
#      - ./docker/www:/var/www/
#      - ./:/var/www/book/
#    tty: true
#    container_name: node
#    networks:
#      - dev
  ######################################
#  node-watch:
#    build:
#      context: .
#      dockerfile: docker/node/node.Dockerfile
#    volumes:
#      - ./:/var/www/book/
#    container_name: node-watch
#    command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && npm run watch"
#    networks:
#      - dev
  ######################################
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.2
#    environment:
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - ./docker/storage/elasticsearch:/var/usr/share/elasticsearch/data
#    container_name: elasticsearch
#    ports:
#      - "9201:9200"
#    networks:
#      - dev
  ######################################
  #  storage:
  #    build:
  #      context: ./docker/storage/development
  #      dockerfile: nginx.docker
  #    volumes:
  #      - ./storage:/app
  #    ports:
  #      - "8081:80"
  #    networks:
  #      - dev
  ######################################
#  ftp:
#    #    build:
#    #      context: .
#    #      dockerfile: docker/ftp/ftp.Dockerfile
#    image: stilliard/pure-ftpd
#    environment:
#      FTP_USER_NAME: app
#      FTP_USER_PASS: secret
#      FTP_USER_HOME: /app
#    volumes:
#      - ./docker/ftp/public:/var
#    networks:
#      - dev
#  ######################################
#  rabbitmq:
#    #    build:
#    #      context: .
#    #      dockerfile: docker/ftp/ftp.Dockerfile
#    image: rabbitmq:3-management
#    environment:
#      RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
#      RABBITMQ_DEFAULT_USER: rabbit
#      RABBITMQ_DEFAULT_PASS: rabbit
#    container_name: rabbitmq
#    ports:
#      - "8085:15672"
#      - "5672:5672"
#    volumes:
#      - ./docker/rabbitmq/enabled_plugins:/var/etc/rabbitmq/enabled_plugins
#    networks:
#      - dev
  ######################################



volumes:
  postgres:
  php_socket:
  caddy_data:
  caddy_config:
#  redis:
#  redis-queue:
    ###> doctrine/doctrine-bundle ###
  db_data:
    ###< doctrine/doctrine-bundle ###
    ###> symfony/mercure-bundle ###
    ###< symfony/mercure-bundle ###


  composer:

networks:
  dev:
    driver: bridge


    # https://prototype.php.net/versions/7.4/install/docker
