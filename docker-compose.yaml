version: '3.5'
networks:
  backend:
services:
  ######################################
  nginx:
#    image: nginx:stable-alpine
    build:
      context: .
      dockerfile: docker/nginx/ngnix.Dockerfile
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
      - "433:433"
    links:
      - php-8.0
    volumes:
      - ./docker/www:/var/www
      - ./public:/var/www/book
      - ./src:/var/www/book/src
      - ./:/var/www/book/dev
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx/
    depends_on:
      - redis
      - mongo
      - postgres
      - php-8.0fpm
      - rabbitmq
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
  ######################################
  php-8.0fpm:
    build:
      context: .
      dockerfile: docker/php/8.0/php-fpm.Dockerfile
      args:
        DOCKER_PHP_VERSION: '8.0.0'
        DOCKER_PHP_ENABLE_XDEBUG: 'on'
        TZ: ${WORKSPACE_TIMEZONE}
    links:
      - postgres
      - redis
      - elasticsearch
      - rabbitmq
    environment:
      - "ELASTICSEARCH_HOSTS=elasticsearch:9200"
    working_dir: /var/www
    container_name: php-8.0
    volumes:
#      - ./.ssh:/home/www-data/.ssh
      - ./docker/www:/var/www/
      - ./public:/var/www/book/
      - ./src:/var/www/book/src/
      - ./:/var/www/book/dev/
      - ./docker/php/8.0/php.ini:/usr/local/etc/php/php.ini
#      - ./php-workers/8.0/supervisor.d:/etc/supervisor.d
#      - ./docker/php/8.0/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php/8.0/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
#      - ./docker/php/8.0/conf.d/opcache.ini://usr/local/etc/php/conf.d/opcache.ini
#        entrypoint: "php -S 0.0.0.0:8000"
    depends_on:
      - postgres
      - redis
      - redis-queue
      - storage
      - rabbitmq
    ports:
      - "127.0.0.1:8000:8000"
#      - "${PHP_8_0_PORT}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "1024k"
        max-file: "2"
#    extra_hosts:
#      - 'book.localhost:93.73.44.251'
  ######################################
  php-8.0cli:
    build:
      context: .
      dockerfile: docker/php/8.0/php-cli.Dockerfile
      args:
        DOCKER_PHP_VERSION: '8.0.0'
        DOCKER_PHP_ENABLE_XDEBUG: 'on'
        TZ: ${WORKSPACE_TIMEZONE}
    links:
      - postgres
        - redis
        - elasticsearch
    environment:
      - "ELASTICSEARCH_HOSTS=elasticsearch:9200"
    tty: true
    working_dir: /var/www
    container_name: php-8.0
    volumes:
#      - ./.ssh:/home/www-data/.ssh
      - ./docker/www:/var/www/
      - ./public:/var/www/book/
      - ./src:/var/www/book/src/
      - ./:/var/www/book/dev/
      - ./docker/php/8.0/php.ini:/usr/local/etc/php/php.ini
#      - ./php-workers/8.0/supervisor.d:/etc/supervisor.d
#      - ./docker/php/8.0/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php/8.0/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
#      - ./docker/php/8.0/conf.d/opcache.ini://usr/local/etc/php/conf.d/opcache.ini
      - composer:/root/.composer/cache
#    entrypoint: "php -S 0.0.0.0:8000"
    depends_on:
      - postgres
      - redis
      - redis-queue
      - storage
    ports:
      - "127.0.0.1:8000:8000"
#      - "${PHP_8_0_PORT}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "1024k"
        max-file: "2"
#      extra_hosts:
#        - 'book.localhost:93.73.44.251'
  ######################################
  redis:
#    build:
#      context: .
#      dockerfile: docker/redis/redis.Dockerfile
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    container_name: redis
    volumes:
      - ./docker/redis/data:/var/lib/redis
      - ./docker/redis/conf:/usr/local/etc/redis/redis.conf
    command:
      - 'redis-server'
      - '--databases 2'
      - '--save 900 1'
      - '--save 300 10'
      - '--save 60 10000'
      - '--requirepass secret'
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
  ######################################
  redis-queue:
    #    build:
    #      context: .
    #      dockerfile: docker/redis/redis.Dockerfile
    image: redis:latest
    volumes:
      - ./docker/redis/queue:/var/www/queue
  ######################################
  postgres:
    image: postgres:alpine
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/dump:/dump
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${WORKSPACE_TIMEZONE}
    container_name: postgres
  ######################################
  node:
    build:
      context: .
      dockerfile: docker/node/node.Dockerfile
    volumes:
      - ./docker/www:/var/www/
      - ./public:/var/www/book/
      - ./src:/var/www/book/src/
      - ./:/var/www/book/dev/
    tty: true
  ######################################
  node-watch:
    build:
      context: .
      dockerfile: docker/node/node.Dockerfile
    volumes:
      - ./docker/www:/var/www/
      - ./public:/var/www/book/
      - ./src:/var/www/book/src/
      - ./:/var/www/book/dev/
    command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && npm run watch"
  ######################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.2
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker/storage/elasticsearch:/usr/share/elasticsearch/data
    ports:
    - "9201:9200"
  ######################################
  storage:
    build:
      context: ./docker/storage/development
      dockerfile: nginx.docker
    volumes:
      - ./storage:/app
    ports:
      - "8081:80"
  ######################################
  ftp:
#    build:
#      context: .
#      dockerfile: docker/ftp/ftp.Dockerfile
    image: stilliard/pure-ftpd
    environment:
      FTP_USER_NAME: app
      FTP_USER_PASS: secret
      FTP_USER_HOME: /app
    volumes:
      - ./docker/ftp/public:/var
  ######################################
  rabbitmq:
#    build:
#      context: .
#      dockerfile: docker/ftp/ftp.Dockerfile
    image: rabbitmq:3-management
    environment:
      RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
    ports:
      - "8085:15672"
      - "5672:5672"
    volumes:
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
  ######################################
volumes:
  postgres:
  redis:
  redis-queue:
  composer:

