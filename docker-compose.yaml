version: '3.5'
networks:
  backend:
services:

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./docker/www:/var/www
      - ./public:/var/www/book
      - ./src:/var/www/book/src
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx/
    depends_on:
      - redis
      - mongo
      - postgres
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
#    networks:
#      - backend



  php-8.0:
    build:
      context: ./docker/php/8.0
      dockerfile: docker/php/8.0/Dockerfile
      args:
        DOCKER_PHP_VERSION: '8.0.0'
        DOCKER_PHP_ENABLE_XDEBUG: 'on'
        TZ: ${WORKSPACE_TIMEZONE}
    working_dir: /var/www
    container_name: php-8.0
    volumes:
#      - ./.ssh:/home/www-data/.ssh
      - ./docker/www:/var/www/
      - ./src:/var/www/book/src
      - ./docker/php/8.0/php.ini:/usr/local/etc/php/php.ini
#      - ./php-workers/8.0/supervisor.d:/etc/supervisor.d
      - ./docker/php/8.0/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php/8.0/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
#      - ./docker/php/8.0/conf.d/opcache.ini://usr/local/etc/php/conf.d/opcache.ini

#        entrypoint: "php -S 0.0.0.0:8000"
    ports:
      - "127.0.0.1:8080:8080"
#      - "${PHP_8_0_PORT}:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "1024k"
        max-file: "2"
#    extra_hosts:
#      - 'book.localhost:93.73.44.251'

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    container_name: redis
    volumes:
      - ./docker/redis/data:/var/lib/redis
      - ./docker/redis/conf:/usr/local/etc/redis/redis.conf
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
#    networks:
#      - backend

  postgres:
    image: postgres:alpine
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/dump:/dump
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${WORKSPACE_TIMEZONE}
#    networks:
#        - backend
    container_name: postgres
